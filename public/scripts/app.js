// const data = [
//   {id: 1, author: "Pete Hunt", text: "This is one comment"},
//   {id: 2, author: "Jordan Walke", text: "This is *another* comment"}
// ];

const CommentBox = React.createClass({ //class in PascalCase
  //should use class CommentBox extends React.Component
  //see https://toddmotto.com/react-create-class-versus-component/

  //getInitialState executes exactly once during the lifecycle of the component
  //and sets up the initial state of the component.
  getInitialState: function() {
    return {data: []};
  },
  //componentDidMount is a method called automatically
  //by React after a component is rendered for the first time
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },

  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});

    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  render(){
    return (//HTML element camelCase
      //<div> tags are not actual DOM nodes; they are instantiations of React div components
      <div className="commentBox">
        <h1>Comments</h1>
        {/*pass prop data of CommentBox to prop data of CommentList*/}
        {/*<CommentList data={this.props.data} /> */}
        <CommentList data={this.state.data} />
        {/*<CommentForm />*/}
        {/*catch prop of CommentForm to launch callback*/}
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});
const CommentList = React.createClass({
  render() {
    let commentNodes = this.props.data.map(function(comment) {// take prop data of CommentList
      return (
        <Comment author={comment.author} key={comment.id}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

const CommentForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    // preventDefault() prevents the
    // browser's default action of submitting the form.
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text}); // define prop onCommentSubmit
    this.setState({author: '', text: ''});
  },
  render() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
      <input
        type="text"
        placeholder="Your name"
        value={this.state.author}
        onChange={this.handleAuthorChange}
      />
      <input
        type="text"
        placeholder="Say something..."
        value={this.state.text}
        onChange={this.handleTextChange}
      />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

var Comment = React.createClass({
  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {/*Data passed in from a parent component is
          available as a 'property' on the child component. */}
          {this.props.author}
        </h2>
        {/*We access named attributes passed to the component as keys
        on this.props and any nested elements as this.props.children.*/}
        {this.props.children}
      </div>
    );
  }
});
//ReactDOM.render() instantiates the root component,
//starts the framework, and injects the markup into a raw DOM element
ReactDOM.render(
  // pass data from comments.js to prop data of CommentBox
  <CommentBox url="/api/comments" pollInterval={2000} />,
  // pass const data to prop data of CommentBox
  // <CommentBox data={data} />,
  document.getElementById('content')
);
